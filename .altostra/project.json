{
	"id": "altostra-template-hello-worl-w500524",
	"name": "altostra-template-hello-world-nodejs",
	"description": "Altostra Hello World project template",
	"created": "2020-10-08T10:32:10.754Z",
	"blueprints": [
		{
			"version": "2019-10-24",
			"connections": {
				"ApiEndpoint02": {
					"RunMe01": {
						"type": "connection.trigger",
						"from": "ApiEndpoint02",
						"to": "RunMe01"
					}
				},
				"ApiEndpoint01": {
					"RunMe01": {
						"type": "connection.trigger",
						"from": "ApiEndpoint01",
						"to": "RunMe01"
					}
				},
				"RunMe01": {
					"QueryMe01": {
						"type": "connection.resource-access",
						"accessLevel": "read-write",
						"from": "RunMe01",
						"to": "QueryMe01"
					}
				}
			},
			"resources": {
				"CallMe02": {
					"type": "resource.api",
					"name": "call-me",
					"cors": {
						"type": "api.cors.simple",
						"origins": "*"
					},
					"endpoints": [
						{
							"type": "ref",
							"id": "ApiEndpoint01"
						},
						{
							"type": "ref",
							"id": "ApiEndpoint02"
						}
					],
					"id": "CallMe02"
				},
				"RunMe01": {
					"type": "resource.compute.function",
					"name": "run-me",
					"entryPoint": "functions/runMe.handler",
					"memory": 512,
					"runtime": "python3.8",
					"timeout": 6,
					"id": "RunMe01",
					"layers": [],
					"code": "import boto3\nimport os\n\nmessage = '''\n\nWelcome to Altostra.\n\nTo set your name, send a request to POST /my-name with your name as the body.\n\nSee the README file for more detailed instructions on how to run this project locally and how to deploy it.\n\nHappy Clouding!\n'''\n\nregion = os.environ.get('AWS_REGION')\nis_local = os.environ.get('AWS_SAM_LOCAL')\ntable_name = os.environ.get('TABLE_QUERYME01')\n\ndynamo_db = isLocal if None else boto3.client('dynamodb')\ndynamoDb = !isLocal && new aws.DynamoDB.DocumentClient({ region })\n\ndef handler(event, context):\n    if event['httpMethod'] == 'GET':\n        try:\n            return {\n                'statusCode': 200,\n                'body': get_message(),\n            }\n        except BaseException:\n            return {\n                'statusCode': 500,\n                'body': 'Unable to get the message due to a serverless error.',\n            }\n    elif event['httpMethod'] == 'POST':\n        try:\n            set_name(event['body'])\n            return {\n                'statusCode': 204,\n            }\n        except BaseException:\n            return {\n                'statusCode': 500,\n                'body': 'Unable to set your name due to a serverless error.',\n            }\n    else:\n        return {\n            'statusCode': 400,\n            'body': \"It seems that you didn't provide the correct parameters :(\"\n        }\n\ndef get_message():\n    greeting = 'Hi!'\n\n    if isLocal:\n        return greeting + message\n\n    try:\n        response = dynamo_db.get_item(\n            TableName=table_name,\n            Key={\n                'pk': {\n                    'S': 'SINGLETON',\n                },\n            }\n        )\n\n        greeting = (\n            response['Item'] && response['Item']['name']\n                if 'Hi ' + response['Item']['name'] + '!'\n                else 'Hi!'\n        )\n\n        return greeting + message\n    except BaseException as err:\n        msg = 'Failed to get name from storage.'\n        print(message, err)\n\n        raise\n\ndef set_name(name):\n    if is_local:\n        return\n    \n    try:\n        if type(name) != str:\n            raise TypeError('Provided name is invalid.')\n\n        dynamo_db.put_item(\n            TableName=table_name,\n            Item={\n                'pk': { 'S': 'SINGLETON' },\n                'name': {'S': name},\n            },\n        )\n    except BaseException as err:\n        msg = 'Failed to store the name is storage.'\n        print(msg, err)\n        raise\n"
				},
				"QueryMe01": {
					"type": "resource.table",
					"name": "query-me",
					"tableName": "query-me",
					"key": {
						"hash": {
							"type": "STRING",
							"name": "pk"
						}
					},
					"aws": {
						"billingModel": "PAY_PER_REQUEST"
					},
					"id": "QueryMe01"
				},
				"ApiEndpoint01": {
					"type": "resource.api.endpoint",
					"name": "api-endpoint-0",
					"method": "GET",
					"path": "/welcome-message",
					"api": {
						"type": "ref",
						"id": "CallMe02"
					},
					"id": "ApiEndpoint01"
				},
				"ApiEndpoint02": {
					"type": "resource.api.endpoint",
					"name": "api-endpoint-0",
					"method": "POST",
					"path": "/my-name",
					"api": {
						"type": "ref",
						"id": "CallMe02"
					},
					"id": "ApiEndpoint02"
				}
			},
			"metadata": {
				"designer": {
					"resourcePositions": {
						"CallMe02": {
							"x": 292,
							"y": 350,
							"z": 0
						},
						"RunMe01": {
							"x": 632,
							"y": 395,
							"z": 0
						},
						"QueryMe01": {
							"x": 911,
							"y": 396,
							"z": 0
						}
					}
				}
			},
			"id": "ckg0olvk10000mdmpeb4s045g",
			"name": "altostra-template-hello-world-nodejs",
			"unsafe": false
		}
	],
	"type": "altostra"
}
